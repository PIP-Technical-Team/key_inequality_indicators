dt_use[
Impute_Forward1 == TRUE & Impute_Forward2 == TRUE, # both forward imputed, or not imputed at all
ChangeYears := {
year2_selected - year1_selected - ImputeYears1 + ImputeYears2
}
]
dt_use[
Impute_Forward1 == FALSE & Impute_Forward2 == TRUE, # both forward imputed, or not imputed at all
ChangeYears := {
year2_selected - year1_selected + ImputeYears1 + ImputeYears2
}
]
dt_use[
Impute_Forward1 == TRUE & Impute_Forward2 == FALSE, # both forward imputed, or not imputed at all
ChangeYears := {
year2_selected - year1_selected - ImputeYears1 - ImputeYears2
}
]
dt_use[
Impute_Forward1 == FALSE & Impute_Forward2 == FALSE, # both forward imputed, or not imputed at all
ChangeYears := {
year2_selected - year1_selected + ImputeYears1 - ImputeYears2
}
]
dt_use[, AnnualizedChange := Change/ChangeYears]
dt_use[, Change := abs(Change)]
dt_use[, country_name := factor(country_name, levels = country_name[order(Indicator1)])]
#dt_use <- na.omit(dt_use)
# Define tooltip
dt_use[
,
text_tooltip :=
paste0(
"Economy: ", country_name, "\n",
"Region: ", region_name, "\n",
"Initial Value: ", round(Indicator1, 2), "\n",
"Annualized Change: ", round(AnnualizedChange, 2)
)
]
# Return
return(dt_use)
}
dt_impute2 <- create_data_imputed_by_countries_two_years(dt_pip, year1_selected = 2006, year2_selected = 2008, window_length = 1)
dt_impute2
dt_impute2
dt_impute
# Income groups
dt_class <- haven::read_dta(
here::here("data", "CLASS.dta")
)
dt_class <- dt_class |>
as.data.table()
dt_class <- dt_class |>
as.data.table() |>
unique(
by = c("economy", "incgroup_current")
)
dt_class[incgroup_current == NA]
dt_class
dt_class$economy |> unique()
[economy %chin% c("Türkiye", "São Tomé and Príncipe", "Côte d'Ivoire")]
dt_pip[economy %chin% c("Türkiye", "São Tomé and Príncipe", "Côte d'Ivoire")]
dt_class[economy %chin% c("Türkiye", "São Tomé and Príncipe", "Côte d'Ivoire")]
dt_pip[country_name == "Turkey"]
dt_pip$country_name |> unique()
?lag
dt_pip
# Step 1: data ----
dt_pip <- pipr::get_stats(format = "rds")  # install entire data
library("tidyverse")
library("rlang")
library("here")
library("data.table")
library("plotly")
library("flexdashboard")
library("joyn")
library("gghighlight")
library("DT")
library("zoo")
library("RColorBrewer")
dt_pip <- data.table(dt_pip) # as data.table
dt_pip[country_name == "Albania"]
dt_pip[country_name == "Albania"]
??na.locf
?plotly::config
# Add new servers
rsconnect::addServer(
"https://w0lxdshyprd1c01.worldbank.org:443/",
name = "external-server")
rsconnect::addServer(
"https://w0lxdrconn01.worldbank.org:443/",
name = "internal-server")
# Link your accounts to each servers
rsconnect::connectApiUser(
server  = "external-server",
account = "replace-with-your-username",
apiKey  = "replace-with-your-api-key-for-the-external-server")
file.edit("~/.Rprofile")
file.edit("~/.Renviron")
# Link your accounts to each servers
rsconnect::connectApiUser(
server  = "external-server",
account = "zprinsloo",
apiKey  = "GhEjIl9OWlPgwBwG5VzxiW6jZIKNipIO")
export CONNECT_API_KEY=GhEjIl9OWlPgwBwG5VzxiW6jZIKNipIO
# Add new servers
rsconnect::addServer(
"https://w0lxdshyprd1c01.worldbank.org:443/",
name = "external-server")
# Link your accounts to each servers
rsconnect::connectApiUser(
server  = "external-server",
account = "zprinsloo",
apiKey  = "NlYUMV4fbIAOTPCIpOkrA34U6pboGBp1")
rsconnect::connectApiUser(
server  = "internal-server",
account = "zprinsloo",
apiKey  = "GhEjIl9OWlPgwBwG5VzxiW6jZIKNipIO")
source_text <- paste("Source: World Bank, Poverty and Inequality Platform (version 20230919_2017).")
library("tidyverse")
library("rlang")
library("here")
library("data.table")
library("plotly")
library("flexdashboard")
library("joyn")
library("gghighlight")
library("DT")
library("zoo")
library("RColorBrewer")
source_text <- paste("Source: World Bank, Poverty and Inequality Platform (version 20230919_2017).")
# Step 1: data ----
dt_pip <- pipr::get_stats(format = "rds")  # install entire data
dt_pip <- data.table(dt_pip) # as data.table
dt_pip[
,
`:=`(
top_10_bottom_40_ratio = (decile10)/(decile1 + decile2 + decile3 + decile4),
top_20_bottom_20_ratio = (decile10+decile9)/(decile1 + decile2)
)
]
dt_pip[,
gini:= gini*100]
# Step 2: creating general objects ----
pip_countries <- unique(dt_pip$country_name) # list of countries
pip_countries_multiple_welfare_type <-
dt_pip[,
if(.N>1) .SD,
by = .(country_name, year, welfare_type)
]$country_name |>
unique()
pip_countries_multiple_reporting_level <-
dt_pip[,
if(.N > 1)
.SD,
by = .(country_name, year, reporting_level)
]$country_name |>
unique()
# Total pip output
# Step 1: data ----
dt_pip <- pipr::get_stats(format = "rds")  # install entire data
dt_pip <- data.table(dt_pip) # as data.table
dt_pip[
,
`:=`(
top_10_bottom_40_ratio = (decile10)/(decile1 + decile2 + decile3 + decile4),
top_20_bottom_20_ratio = (decile10+decile9)/(decile1 + decile2)
)
]
dt_pip[,
gini:= gini*100]
# Step 2: creating general objects ----
pip_countries <- unique(dt_pip$country_name) # list of countries
pip_countries_multiple_welfare_type <-
dt_pip[,
if(.N>1) .SD,
by = .(country_name, year, welfare_type)
]$country_name |>
unique()
pip_countries_multiple_reporting_level <-
dt_pip[,
if(.N > 1)
.SD,
by = .(country_name, year, reporting_level)
]$country_name |>
unique()
pip_countries_regions <-
unique(dt_pip,
by = c("country_name", "region_code")
)[,
.(country_name, region_code, region_name)
]
region_matching <- unique(
dt_pip[
,
.(region_name),
by = region_code
]
)
# Exclude double rows
dt_pip <-
dt_pip[,
if (.N > 1) {
.SD[!reporting_level == "rural"]
} else {
.SD
},
by = .(country_name, year, welfare_type)
][,
if (.N > 1) {
.SD[reporting_level == "national"]
} else {
.SD
},
by = .(country_name, year, welfare_type)
]
dt_pip <-
dt_pip[,
if (.N > 1) {
.SD[welfare_type == "income"]
} else {
.SD
},
by = .(country_name, year, reporting_level)
]
# make deciles percentages
dec_cols <- paste0("decile", 1:10)
# Multiply each decile column by 100
dt_pip[, (paste0("decile", 1:10)) := lapply(.SD, function(x) x * 100), .SDcols = paste0("decile", 1:10)]
# Income groups
dt_class <- haven::read_dta(
here::here("data", "CLASS.dta")
)
dt_class <- dt_class |>
as.data.table() |>
unique(
by = c("economy", "incgroup_current")
)
# Clean country names
dt_class[
38,
economy := "Cote d'Ivoire"
]
dt_class[
179,
economy := "Sao Tome and Principe"
]
dt_class[
198,
economy := "Turkiye"
]
dt_pip <- joyn::joyn(
x = dt_pip,
y = dt_class,
by = c("country_code = code"),
keep = "left",
match_type = "m:m",
y_vars_to_keep = "incgroup_current"
)
dt_pip[
,
report := NULL
]
dt_pip
?joyn::joyn
dt_pip <- joyn::joyn(
x = dt_pip,
y = dt_class,
by = c("country_code = code"),
keep = "left",
match_type = "m:m",
y_vars_to_keep = "incgroup_current",
reportvar = FALSE
)
# Total pip output
# Step 1: data ----
dt_pip <- pipr::get_stats(format = "rds")  # install entire data
dt_pip <- data.table(dt_pip) # as data.table
dt_pip[
,
`:=`(
top_10_bottom_40_ratio = (decile10)/(decile1 + decile2 + decile3 + decile4),
top_20_bottom_20_ratio = (decile10+decile9)/(decile1 + decile2)
)
]
dt_pip[,
gini:= gini*100]
# Step 2: creating general objects ----
pip_countries <- unique(dt_pip$country_name) # list of countries
pip_countries_multiple_welfare_type <-
dt_pip[,
if(.N>1) .SD,
by = .(country_name, year, welfare_type)
]$country_name |>
unique()
pip_countries_multiple_reporting_level <-
dt_pip[,
if(.N > 1)
.SD,
by = .(country_name, year, reporting_level)
]$country_name |>
unique()
pip_countries_regions <-
unique(dt_pip,
by = c("country_name", "region_code")
)[,
.(country_name, region_code, region_name)
]
region_matching <- unique(
dt_pip[
,
.(region_name),
by = region_code
]
)
# Exclude double rows
dt_pip <-
dt_pip[,
if (.N > 1) {
.SD[!reporting_level == "rural"]
} else {
.SD
},
by = .(country_name, year, welfare_type)
][,
if (.N > 1) {
.SD[reporting_level == "national"]
} else {
.SD
},
by = .(country_name, year, welfare_type)
]
dt_pip <-
dt_pip[,
if (.N > 1) {
.SD[welfare_type == "income"]
} else {
.SD
},
by = .(country_name, year, reporting_level)
]
# make deciles percentages
dec_cols <- paste0("decile", 1:10)
# Multiply each decile column by 100
dt_pip[, (paste0("decile", 1:10)) := lapply(.SD, function(x) x * 100), .SDcols = paste0("decile", 1:10)]
# Income groups
dt_class <- haven::read_dta(
here::here("data", "CLASS.dta")
)
dt_class <- dt_class |>
as.data.table() |>
unique(
by = c("economy", "incgroup_current")
)
# Clean country names
dt_class[
38,
economy := "Cote d'Ivoire"
]
dt_class[
179,
economy := "Sao Tome and Principe"
]
dt_class[
198,
economy := "Turkiye"
]
dt_pip <- joyn::joyn(
x = dt_pip,
y = dt_class,
by = c("country_code = code"),
keep = "left",
match_type = "m:m",
y_vars_to_keep = "incgroup_current",
reportvar = FALSE
)
dt_pip <- joyn::joyn(
x = dt_pip,
y = dt_class,
by = c("country_code = code"),
keep = "left",
match_type = "m:1",
y_vars_to_keep = "incgroup_current",
reportvar = FALSE
)
source_text <- paste("Source: World Bank, Poverty and Inequality Platform (version 20230919_2017).")
# Total pip output
# Step 1: data ----
dt_pip <- pipr::get_stats(format = "rds")  # install entire data
dt_pip <- data.table(dt_pip) # as data.table
dt_pip[
,
`:=`(
top_10_bottom_40_ratio = (decile10)/(decile1 + decile2 + decile3 + decile4),
top_20_bottom_20_ratio = (decile10+decile9)/(decile1 + decile2)
)
]
dt_pip[,
gini:= gini*100]
# Step 2: creating general objects ----
pip_countries <- unique(dt_pip$country_name) # list of countries
pip_countries_multiple_welfare_type <-
dt_pip[,
if(.N>1) .SD,
by = .(country_name, year, welfare_type)
]$country_name |>
unique()
pip_countries_multiple_reporting_level <-
dt_pip[,
if(.N > 1)
.SD,
by = .(country_name, year, reporting_level)
]$country_name |>
unique()
pip_countries_regions <-
unique(dt_pip,
by = c("country_name", "region_code")
)[,
.(country_name, region_code, region_name)
]
region_matching <- unique(
dt_pip[
,
.(region_name),
by = region_code
]
)
# Exclude double rows
dt_pip <-
dt_pip[,
if (.N > 1) {
.SD[!reporting_level == "rural"]
} else {
.SD
},
by = .(country_name, year, welfare_type)
][,
if (.N > 1) {
.SD[reporting_level == "national"]
} else {
.SD
},
by = .(country_name, year, welfare_type)
]
dt_pip <-
dt_pip[,
if (.N > 1) {
.SD[welfare_type == "income"]
} else {
.SD
},
by = .(country_name, year, reporting_level)
]
# make deciles percentages
dec_cols <- paste0("decile", 1:10)
# Multiply each decile column by 100
dt_pip[, (paste0("decile", 1:10)) := lapply(.SD, function(x) x * 100), .SDcols = paste0("decile", 1:10)]
# Income groups
dt_class <- haven::read_dta(
here::here("data", "CLASS.dta")
)
dt_class <- dt_class |>
as.data.table() |>
unique(
by = c("economy", "incgroup_current")
)
# Clean country names
dt_class[
38,
economy := "Cote d'Ivoire"
]
dt_class[
179,
economy := "Sao Tome and Principe"
]
dt_class[
198,
economy := "Turkiye"
]
dt_pip <- joyn::joyn(
x = dt_pip,
y = dt_class,
by = c("country_code = code"),
keep = "left",
match_type = "m:1",
y_vars_to_keep = "incgroup_current",
reportvar = FALSE
)
joyn::merge |> args()
install.packages("rsconnect")
install.packages("rsconnect")
rlang::last_trace()
file.edit("~/.Renviron")
rlang::last_trace()
?ggplot2::stat_smooth
?ggplot2::geom_area
?ggplot2::geom_line
# Step 1: data ----
dt_pip <- pipr::get_stats(format = "rds")  # install entire data
pacman::p_load(tidyverse)
dt_pip[country_code == "ZAF"]
ggplot(data = dt_pip[country_code == "ZAF"])
dt_pip
dt_pip |> filter(country_code == "ZAF")
ggplot(data = dt_pip |> filter(country_code == "ZAF")) +
geom_line(aes(x = year, y = gini))
ggplot(data = dt_pip |> filter(country_code == "ZAF")) +
geom_line(aes(x = year, y = gini), stat = "smooth")
ggplot(data = dt_pip |> filter(country_code == "ZAF")) +
geom_area(aes(x = year, y = gini), stat = "smooth")
ggplot(data = dt_pip |> filter(country_code == "ZAF")) +
geom_area(aes(x = year, y = gini))
