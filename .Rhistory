# Change column names back to true indicator names
setnames(
dt_use,
old    = names(dt_use),
new    = gsub(pattern = "Indicator", replacement = indicator, x = names(dt_use))
)
dt_use
ggplot(
data = dt_use,
) +
geom_segment(
aes(
x     = paste0(ineq_indicator, "1"),
xend  = paste0(ineq_indicator, "2"),
y     = country_name,
yend  = country_name,
color = ChangeColor
), arrow = arrow(length = unit(1.2, "mm"), type = "closed")
) +
#geom_point(aes(x = GiniChange, y = country_name, color = Change))+
scale_color_manual(values = c("Negative" = "red", "Positive" = "darkgreen")) +
geom_point(aes(x = paste0(input$ineq_indicator, "1"), y = country_name, colour = ChangeColor), size = 1) +
theme_minimal()+
labs(
title = "Change in Gini from 2000 to 2005",
subtitle = "Countries ordered from highest to lowest 2000 Gini",
x = "Change in Gini",
y = "Country"
)
ggplot(
data = dt_use,
) +
geom_segment(
aes(
x     = paste0(ineq_indicator, "1"),
xend  = paste0(ineq_indicator, "2"),
y     = country_name,
yend  = country_name,
color = ChangeColor
), arrow = arrow(length = unit(1.2, "mm"), type = "closed")
) +
#geom_point(aes(x = GiniChange, y = country_name, color = Change))+
scale_color_manual(values = c("Negative" = "red", "Positive" = "darkgreen")) +
geom_point(aes(x = paste0(ineq_indicator, "1"), y = country_name, colour = ChangeColor), size = 1) +
theme_minimal()+
labs(
title = "Change in Gini from 2000 to 2005",
subtitle = "Countries ordered from highest to lowest 2000 Gini",
x = "Change in Gini",
y = "Country"
)
dt_use <- copy(dt_pip)
# Data in Year 1
dt1 <- create_data_imputed_by_countries(
dt                 = dt_use,
countries_selected = countries_selected,
year_selected      = year1_selected,
indicator          = indicator,
welfare            = welfare,
window_length      = window_length
)
setnames(
dt1,
old = tolower(indicator),
new = c("Indicator1")
)
dt1 <- dt1[, .(country_name, year, Indicator1)]
# Data in Year 2
dt2 <- create_data_imputed_by_countries(
dt                 = dt_use,
countries_selected = countries_selected,
year_selected      = year2_selected,
indicator          = indicator,
welfare            = welfare,
window_length      = window_length
)
setnames(
dt2,
old = tolower(indicator),
new = c("Indicator2")
)
dt2 <- dt2[, .(country_name, year, Indicator2)]
# Join the two years
dt_use <- joyn::merge(
dt1,
dt2,
keep = "left",
match_type = "1:1",
by = "country_name"
)
# Find the change in indicator
dt_use[,report:=NULL]
dt_use[, Change := Indicator1-Indicator2]
dt_use[, AnnualizedChange := Change/abs(year2_selected-year1_selected)]
dt_use[, ChangeColor := ifelse(Change<0, "Negative", "Positive")]
ggplot(
data = dt_use,
) +
geom_segment(
aes(
x     = Indicator1,
xend  = Indicator1,
y     = country_name,
yend  = country_name,
color = ChangeColor
), arrow = arrow(length = unit(1.2, "mm"), type = "closed")
) +
#geom_point(aes(x = GiniChange, y = country_name, color = Change))+
scale_color_manual(values = c("Negative" = "red", "Positive" = "darkgreen")) +
geom_point(aes(x = paste0(ineq_indicator, "1"), y = country_name, colour = ChangeColor), size = 1) +
theme_minimal()+
labs(
title = "Change in Gini from 2000 to 2005",
subtitle = "Countries ordered from highest to lowest 2000 Gini",
x = "Change in Gini",
y = "Country"
)
ggplot(
data = dt_use,
) +
geom_segment(
aes(
x     = Indicator1,
xend  = Indicator1,
y     = country_name,
yend  = country_name,
color = ChangeColor
), arrow = arrow(length = unit(1.2, "mm"), type = "closed")
)
ggplot(
data = dt_use,
) +
geom_segment(
aes(
x     = Indicator1,
xend  = Indicator1,
y     = country_name,
yend  = country_name,
color = ChangeColor
), arrow = arrow(length = unit(1.2, "mm"), type = "closed")
) +
#geom_point(aes(x = GiniChange, y = country_name, color = Change))+
scale_color_manual(values = c("Negative" = "red", "Positive" = "darkgreen"))
ggplot(
data = dt_use,
) +
geom_segment(
aes(
x     = Indicator1,
xend  = Indicator1,
y     = country_name,
yend  = country_name,
color = ChangeColor
), arrow = arrow(length = unit(1.2, "mm"), type = "closed")
) +
#geom_point(aes(x = GiniChange, y = country_name, color = Change))+
scale_color_manual(values = c("Negative" = "red", "Positive" = "darkgreen")) +
geom_point(aes(x = paste0(ineq_indicator, "1"), y = country_name, colour = ChangeColor), size = 1)
ggplot(
data = dt_use,
) +
geom_segment(
aes(
x     = Indicator1,
xend  = Indicator1,
y     = country_name,
yend  = country_name,
color = ChangeColor
), arrow = arrow(length = unit(1.2, "mm"), type = "closed")
) +
#geom_point(aes(x = GiniChange, y = country_name, color = Change))+
scale_color_manual(values = c("Negative" = "red", "Positive" = "darkgreen")) +
geom_point(aes(x = Indicator1, y = country_name, colour = ChangeColor), size = 1)
dt_use
ggplot(
data = dt_use,
) +
geom_segment(
aes(
x     = Indicator1,
xend  = Indicator2,
y     = country_name,
yend  = country_name,
color = ChangeColor
), arrow = arrow(length = unit(1.2, "mm"), type = "closed")
) +
#geom_point(aes(x = GiniChange, y = country_name, color = Change))+
scale_color_manual(values = c("Negative" = "red", "Positive" = "darkgreen")) +
geom_point(aes(x = Indicator1, y = country_name, colour = ChangeColor), size = 1)
ggplot(
data = dt_use,
) +
geom_segment(
aes(
x     = Indicator1,
xend  = Indicator2,
y     = country_name,
yend  = country_name,
color = ChangeColor
), arrow = arrow(length = unit(1.2, "mm"), type = "closed")
) +
#geom_point(aes(x = GiniChange, y = country_name, color = Change))+
scale_color_manual(values = c("Negative" = "red", "Positive" = "darkgreen")) +
geom_point(aes(x = Indicator1, y = country_name, colour = ChangeColor), size = 1) +
theme_minimal()
ggplot(
data = dt_use,
) +
geom_segment(
aes(
x     = Indicator1,
xend  = Indicator2,
y     = country_name,
yend  = country_name,
color = ChangeColor
), arrow = arrow(length = unit(1.2, "mm"), type = "closed")
) +
#geom_point(aes(x = GiniChange, y = country_name, color = Change))+
scale_color_manual(values = c("Negative" = "red", "Positive" = "darkgreen")) +
geom_point(aes(x = Indicator1, y = country_name, colour = ChangeColor), size = 1) +
theme_minimal()+
labs(
title = "Change in Gini from 2000 to 2005",
subtitle = "Countries ordered from highest to lowest 2000 Gini",
x = "Change in Gini",
y = "Country"
)
dt_use
pip_countries
dt_use
dt_pip
tolower(c("Hello", "There"))
dt_use
dt_use <- copy(dt_pip)
dt_use
dt_use[region_code %chin% c("SSA")]
dt_use[region_code %chin% c("SSA"), Region := region_code]
dt_use
c("All", dt_pip$region_code |> unique() |> sort())
c("All") %chin% c("All", dt_pip$region_code |> unique() |> sort())
dt_use[, Region := ""]
dt_use
source("~/.active-rstudio-document", echo=TRUE)
pip_countries_regions
dt_use
dt_use[country_name %chin% c("South Africa")]
dt_use[country_name %chin% c("South Africa") | region_code %chin% c("LAC")]
}
pip_countries_regions
pip_countries_regions[country_name %chin% c("Uganda")]
c((pip_countries_regions[country_name %chin% c("Uganda")])$country_name, (pip_countries_regions[region_code %chin% c("LAC")])$country_name)
c((pip_countries_regions[country_name %chin% c("Uganda")])$country_name, (pip_countries_regions[region_code %chin% c("LAC")])$country_name) |> unique()
dt_use |>
filter(country_name %chin% c("South Africa", "Colombia", "United States", "Germany", "Nepal", "Peru", "Argentina")) |>
ggplot(aes(x = year, y = gini, color = country_name)) +
geom_point(
aes(x = year, y = gini, color = country_name, shape = region_code)
) +
geom_line(aes(group = comparable_spell)) +
labs(
title = "Gini over time",
subtitle = "Selected countries",
x = "Year",
y = "Gini",
color = "Country",
shape = "Region"
)+
theme_bw()
pacman::p_load(gghighlight)
?checkboxGroupInput
?radiobuttons
?radioButtons
dt_pip |> colnames()
dt_pip[, .(country_name, c("region_code", "year"))]
dt_pip[, ..c("region_code", "year")]
dt_pip[, ..("region_code", "year")]
blabla <- c("region_code", "year")
dt_pip[, ..blabla]
dt_pip[, .(country_name, .blabla)]
dt_pip[, .(country_name, ..blabla)]
dt_pip[, .(country_name), ..blabla)]
dt_pip[, .(country_name), ..blabla]
rm(blabla)
make_table_across_countries <- function(
dt,
country_name_vec = c("Angola", "South Africa"),
ineq_indicators  = c(
"Mean",
"Median",
"Mld",
"Gini",
"Decile1",
"Decile2",
"Decile3",
"Decile4",
"Decile5",
"Decile6",
"Decile7",
"Decile8",
"Decile9",
"Decile10",
"Top10_bottom40",
"Top20_bottom20"
),
years_selected = c("All", "Latest")
){
dt <- copy(dt)
# Check Inputs ----
stopifnot(is.data.table(dt))
stopifnot(country_name_vec %chin% pip_countries)
years_selected <- match.arg(years_selected)
if(!ineq_indicators %in% c(
"Mean",
"Median",
"Mld",
"Gini",
"Decile1",
"Decile2",
"Decile3",
"Decile4",
"Decile5",
"Decile6",
"Decile7",
"Decile8",
"Decile9",
"Decile10",
"Top10_bottom40",
"Top20_bottom20"
) |> all()) stop("Select appropriate inequality indicators")
#dt <- dt[, if (.N > 1) .SD[reporting_level == "national"] else .SD, by = .(country_name, year)]
# Prepare Data ----
selected_cols <- c(
"Country",
"Region",
"Year",
"Reporting_level",
"Welfare_type",
ineq_indicators
)
setnames(
dt,
old = c("country_name", "region_code"),
new = c("country", "region")                           # Clean variable names
)
setnames(
dt,
stringr::str_to_title(names(dt))             # Capitalize column names
)
dt <- dt[
Country %chin% country_name_vec,         # filter by country
..selected_cols                             # Select id vars and inequality indicators
]
dt[
,
(names(dt)) := lapply(                       # Round to 2 decimals
.SD,
function(x){if(is.numeric(x)) round(x, 2) else x}
)
]
if(years_selected == "Latest"){
dt <- dt[, .SD[which.max(Year)], by = Country]
}
list_of_columns <- lapply(
names(dt), function(col_name) {              # Make the columns list items for plotly
return(dt[[col_name]])
})
setorder(dt, Country, Region, -Year, Reporting_level, Welfare_type)
# Plot Table ----
p <- plot_ly(
type = 'table',
#columnwidth = c(100, 100),
header = list(
values = dt |> colnames(), # column names vector
align = c("center", "center"),
line = list(width = 1, color = 'black'),
fill = list(color = c("grey", "grey")),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = list_of_columns,
align = c("center", "center"),
line = list(color = "black", width = 1),
font = list(family = "Arial", size = 12, color = c("black"))
))
p
}
dt_pip[, .(mean, mean)]
dt_pip[, .(mean, mean)][, .(mean)]
dt_pip$reporting_level|> unique()
dt_pip$welfare_type |> unique()
intersect(c(1:5), c(4:10))
?renderPlotly
renderDT()
pacman::p_load(DT)
?renderDT
datatable(dt_pip)
datatable(dt_pip |> head())
datatable(dt_pip |> head(), class = "cell-border stripe")
?datatable
datatable(dt_pip |> head(), class = "compact stripe")
datatable(dt_pip |> head(), class = "compact")
datatable(dt_pip |> head(), class = "compact hover")
datatable(dt_pip |> head(), class = "compact hover nowrap")
datatable(dt_pip |> head(), class = "compact hover")
dt_pip[year == max(year), by = "country_name"]
dt_pip[year == max(year), by = "country_name"]
dt_pip[year == max(year),, by = "country_name"]
dt_pip[year == max(year),.SD, by = "country_name"]
dt_pip[, SD[which.max(year)], by = "country_name"]
dt_pip[, .SD[which.max(year)], by = "country_name"]
pip_countries_regions[region_code %chin% c("SSA", "LAC")]$country_name |> unique()
?inputCheckBox
?inputCheckox
?inputCheckbox
elseif()
?renderDT
renderDT(
datatable(dt_pip)
)
data.table(dt_pip |> head()))
data.table(dt_pip |> head())
datatable(dt_pip |> head())
dt_pip$region_code |> unique()
pip_countries
?checkboxGroupInput
numeric()
numeric()<10
copy(dt_pip
dt_table <- copy(dt_pip)
dt_table <- copy(dt_pip)
dt_pip$region_code |> unique()
pip_countries_regions[region_code == "SSA"]
pip_countries_regions[region_code == "SSA"]$country_name
checkboxGroupInput
checkboxGroupInputs
dt_pip[, .SD]
dt_pip[, .(gini = gini*100)]
dt_pip[, .(gini)]
?h3
?span
dt_pip
dt_pip[, .(country_name, ragion_code, mean = mean_yeah)]
dt_pip[, .(country_name, region_code, mean = mean_yeah)]
dt_pip[, .(country_name, region_code, mean_yeah = mean)]
dt_pip[, .(country_name, region_code, mean_yeah = mean, mean)]
dt_pip[, .(.., mean_yeah = mean)]
?gghighlight
?theme
ggplot(data = dt_pip, aes(x = gini, y = mean)) + geom_point(aes(color = region_code)) + theme_classic()
ggplot(data = dt_pip, aes(x = gini, y = mean)) + geom_point(aes(color = region_code)) + theme_classic() |> ggplotly()
ggplot(data = dt_pip, aes(x = gini, y = mean)) + geom_point(aes(color = region_code)) + theme_classic() +ggplotly()
ggplotly(ggplot(data = dt_pip, aes(x = gini, y = mean)) + geom_point(aes(color = region_code)) + theme_classic())
print(ggplot(data = dt_pip, aes(x = gini, y = mean)) + geom_point(aes(color = region_code)) + theme_classic())
?h4
# Select region for scatter plot to highlight
selectInput("countries_selected_3",
label    = "Select countries to highlight",
choices  = c(dt_pip$country_name |> unique() |> sort()),
selected = c("South Africa", "Colombia", "United States"),
multiple = TRUE)
c("Top 20 Bottom 40 Ratio") |> str_replace(" ", "_")
c("Top 20 Bottom 40 Ratio") |> str_replace_all(" ", "_")
c("Top 20 Bottom 40 Ratio") |> str_replace_all(" ", "_") |> str_remove("_Ratio")
c("Top 20 Bottom 40 Ratio") |> str_to_title()
# Total pip output
# Step 1: data ----
dt_pip <- pipr::get_stats()  # install entire data
dt_pip <- data.table(dt_pip) # as data.table
dt_pip[
,
`:=`(
top_10_bottom_40_ratio = (decile10)/(decile1 + decile2 + decile3 + decile4),
top_20_bottom_20_ratio = (decile10+decile9)/(decile1 + decile2)
)
]
dt_pip[, gini:= gini*100]
# Step 2: creating general objects ----
pip_countries                          <- dt_pip$country_name |> unique() # list of countries
pip_countries_multiple_welfare_type    <- dt_pip[, if(.N>1) .SD, by = .(country_name, year, welfare_type)]$country_name |> unique()
pip_countries_multiple_reporting_level <- dt_pip[, if(.N>1) .SD, by = .(country_name, year, reporting_level)]$country_name |> unique()
pip_countries_regions                  <- unique(dt_pip, by = c("country_name", "region_code"))[, .(country_name, region_code)]
# Exclude double rows
dt_pip                                 <- dt_pip[, if (.N > 1) .SD[!reporting_level == "rural"] else .SD, by = .(country_name, year, welfare_type)][, if (.N > 1) .SD[reporting_level == "national"] else .SD, by = .(country_name, year, welfare_type)]
dt_pip                                 <- dt_pip[, if (.N >1) .SD[welfare_type == "income"] else .SD, by = .(country_name, year, reporting_level)]
dt_pip ||> colnames()
dt_pip |> colnames()
dt_pip |> colnames() |> str_to_title()
c("Top 10 Bottom 40 Ratio") |> str_to_lower() |> str_to_title()
c("Top 10 Bottom 40 Ratio") |> str_replace_all(" ", "_") |> str_to_lower() |> str_to_title()
?theme
ggplot(dt_pip, aes(x = gini, y = mean))
ggplot(dt_pip, aes(x = gini, y = mean)) + geom_point()
ggplot(dt_pip, aes(x = gini, y = mean)) + geom_point() + theme(
axis.title.y = element_text(
angle = 0,            # Set angle to 0 for horizontal orientation
vjust = -1,           # Vertical adjustment
hjust = 0.5,          # Horizontal adjustment
margin = margin(t = 10, r = 0, b = 0, l = 0)  # Margins for positioning
)
)
ggplot(dt_pip, aes(x = gini, y = mean)) + geom_point() + theme(
axis.title.y = element_text(
angle = 0,            # Set angle to 0 for horizontal orientation
#vjust = -1,           # Vertical adjustment
hjust = 0.5,          # Horizontal adjustment
margin = margin(t = 10, r = 0, b = 0, l = 0)  # Margins for positioning
)
)
source("~/.active-rstudio-document", echo=TRUE)
?geom_smooth
?downloadButton
?downloadLink
